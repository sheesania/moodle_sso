<?php
/**
 * @file
 * Code for the Moodle Authentication feature.
 */
use Drupal\Core\Url;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Access\AccessResult;
/**
 * If an affiliate moodle site detects a user isn't logged in, it will direct
 * the user to the drupal login screen, and pass it's url in the moodleurl query
 * attribute.
 *
 * This must be handled specially by the login form, and passed through the
 * form_state to a submit function that will perform a trusted redirect.
 *
 */

/**
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function moodle_sso_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $request = \Drupal::service('request_stack')->getCurrentRequest();
  $query_info = $request->query;

  // Check to see if the moodle redirect url has been passed to this form. if it
  // has store it in the form_state so that it can be used for redirecting later.
  if($query_info->get('moodleurl')) {
    $form_state->set('moodle_sso.redirect', $query_info->get('moodleurl'));
    $form['#submit'][] = 'moodle_sso_form_submit_redirect';
  }
}

/**
 * @param $form
 * @param \Drupal\Core\Form\FormState $form_state
 */
function moodle_sso_form_submit_redirect($form, Drupal\Core\Form\FormState $form_state) {
  if ($destination = $form_state->get('moodle_sso.redirect')) {
    //TODO: validate that the destination is possible based on the cookie domain
    $form_state->setResponse(new TrustedRedirectResponse($destination, 302));
  }
}


/**
 *  Implements hook_user_logout().
 */
function moodle_sso_user_logout($account)
{
  global $cookie_domain;
  $config = \Drupal::config('moodle_sso.settings');
  if($config->get('logout')) {
    unset($_COOKIE['MoodleSession']);
    setcookie($config->get('cookie_name'), '', 1, $config->get('cookie_path'), $config->get('cookie_domain'));
  }
}

/**
 * Adjust the protected user fields needed for moodle sso control to to be
 * visible when the user object is loaded. This will allow the sync and new user
 * calls to create the user.
 * note: this requires a core patch https://www.drupal.org/files/issues/2773645-32.patch
 *   read more about it here: https://www.drupal.org/node/2773645
 * @param $operation
 * @param $field_definition
 * @param $account
 * @param null $items
 * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
 */
function moodle_sso_entity_field_access($operation, $field_definition, $account, $items = NULL) {
  // Allow view access for mail, status, and changed fields.
  if ($field_definition->getName() == 'mail' && $operation == 'view') {
    return AccessResult::allowed();
  }
  if ($field_definition->getName() == 'status' && $operation == 'view') {
    return AccessResult::allowed();
  }
  if ($field_definition->getName() == 'changed' && $operation == 'view') {
    return AccessResult::allowed();
  }
  return AccessResult::neutral();
}